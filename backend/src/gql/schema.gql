# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Setting {
  id: String!
  theme: String!
}

type Auth {
  username: String!
  image: String!
  settings: Setting!
}

type Agent {
  id: String!
  name: String!
  token: String!
  isOnline: Boolean!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Monitor {
  id: String!
  name: String!
  address: String!
  type: String!
  agentId: String!
  status: String!
  interval: Int!
  createdAt: DateTime!
}

type MonitorAgent {
  id: String!
  name: String!
  address: String!
  type: String!
  agentId: String!
  status: String!
  interval: Int!
  createdAt: DateTime!
  agent: Agent!
}

type Notification {
  id: String!
  title: String!
  method: String!
  message: String!
  createdAt: DateTime!
  isDefault: Boolean!
  webhookUrl: String
  content: String
}

type Status {
  id: String!
  responseTime: Float!
  metadata: JSON!
  createdAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Session {
  id: String!
  platform: String!
  deviceIP: String!
  expires: DateTime!
  createdAt: DateTime!
}

type Query {
  me: Auth
  getGithubOAuthUrl: String!
  findMonitorsByUserId: [Monitor!]!
  findMonitorById(id: String!): MonitorAgent!
  getNotificationSettingsByUserId: [Notification!]!
  findAgentsByUserId: [Agent!]!
  getStatusByMonitorId(monitorId: String!, barCount: Float! = 60): [Status!]!
  getLatestStatusByMonitorId(monitorId: String!): Status!
  getOverallStatus(monitorIds: [String!]!): String!
  getStatusByTimeRange(from: DateTime!, to: DateTime!, monitorId: String!): [Status!]!
  getSettingsByUserId: Setting!
  getSessionsByUserId: [Session!]!
}

type Mutation {
  register(input: RegisterInput!): String!
  login(input: LoginInput!): String!
  logout: Boolean!
  pauseMonitorById(id: String!): MonitorAgent!
  resumeMonitorById(id: String!): MonitorAgent!
  deleteMonitorById(id: String!): Monitor!
  updateMonitorById(id: String!, updateMonitorInput: UpdateMonitorInput!): Monitor!
  createMonitor(createMonitorInput: CreateMonitorInput!): Monitor!
  createNotificationSetting(createNotificationInput: CreateNotificationInput!): Notification!
  updateNotificationSetting(updateNotificationInput: UpdateNotificationInput!, id: String!): Notification!
  deleteNotificationSetting(id: String!): Notification!
  createAgent(createAgentInput: CreateAgentInput!): Agent!
  updateTheme(theme: String!): Setting!
  clearSessionsByUserId: [Session!]!
  clearSessionById(id: String!): Session!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  username: String!
  password: String!
  platform: String!
}

input UpdateMonitorInput {
  name: String!
  address: String!
  type: String!
  interval: Float!
}

input CreateMonitorInput {
  name: String!
  address: String!
  type: String!
  interval: Float!
  agentId: String!
}

input CreateNotificationInput {
  title: String!
  method: String!
  message: String!
  webhookUrl: String
  content: String
}

input UpdateNotificationInput {
  title: String!
  method: String!
  message: String!
  webhookUrl: String
  content: String
  isDefault: Boolean!
}

input CreateAgentInput {
  name: String!
}
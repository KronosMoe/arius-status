name: Deploy App

on:
  workflow_dispatch:

jobs:
  deploy-app:
    name: Publish App Docker image to registry
    runs-on: ubuntu-latest

    permissions:
      contents: read
      deployments: write
      actions: read

    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/deployments
          mediaType: '{"previews": ["ant-man"]}'
          ref: ${{ github.sha }}
          required_contexts: '[]'
          environment: production
          auto_merge: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Deployment In Progress
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.id }}/statuses
          mediaType: '{"previews": ["ant-man"]}'
          state: in_progress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_CLIENT_SECRET }}
          tags: tag:ci

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Private registry
        uses: docker/login-action@v3
        with:
          registry: ${{secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Shorter SHA
        shell: bash
        run: |
          echo "sha_short=sha_$(git rev-parse --short "${{ github.sha }}")" >> "$GITHUB_ENV"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{secrets.DOCKER_REGISTRY}}/${{ secrets.IMAGE_NAME }}:${{ env.sha_short }},${{secrets.DOCKER_REGISTRY}}/${{ secrets.IMAGE_NAME }}:latest
          build-args: |
            VITE_APP_VERSION=${{ env.sha_short }}

      - name: Set Deployment Status to Success
        if: success()
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.id }}/statuses
          mediaType: '{"previews": ["ant-man"]}'
          state: success
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Deployment Status to Failure
        if: failure()
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.id }}/statuses
          mediaType: '{"previews": ["ant-man"]}'
          state: failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-manifest:
    name: Update Kubernetes manifest
    runs-on: ubuntu-latest
    needs: [deploy-app]

    permissions:
      contents: read
      actions: read

    steps:
      - uses: actions/checkout@v4
        with:
          repository: KronosMoe/kronos-helm
          ref: "main"
          token: ${{ secrets.token }}

      - name: Shorter SHA
        shell: bash
        run: |
          echo "sha_short=sha_$(git rev-parse --short "${{ github.sha }}")" >> "$GITHUB_ENV"

      - name: Git config and update
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          sed -i "s#appVersion.*#appVersion: ${{ env.sha_short }}#g" ${{ secrets.IMAGE_NAME }}/Chart.yaml
          git add -A
          git commit -am "update ${{ secrets.IMAGE_NAME }} image to version ${{ env.sha_short }}"
          git push origin main
